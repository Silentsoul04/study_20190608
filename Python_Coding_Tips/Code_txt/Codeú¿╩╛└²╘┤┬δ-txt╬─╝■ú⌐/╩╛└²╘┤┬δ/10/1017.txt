INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'apps.mail',		# 邮件验证模块
    'apps.log',		# 日志配置模块
    'apps.chat',		# 实时聊天模块
]





<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8"/>
    <title>Chat Rooms</title>
</head>
<body>
    What chat room would you like to enter?<br/>
    <input id="room-name-input" type="text" size="100"/><br/>
    <input id="room-name-submit" type="button" value="Enter"/>

    <script>
        document.querySelector('#room-name-input').focus();
        document.querySelector('#room-name-input').onkeyup = function(e) {
            if (e.keyCode === 13) {  // enter, return
                document.querySelector('#room-name-submit').click();
            }
        };

        document.querySelector('#room-name-submit').onclick = function(e) {
            var roomName = document.querySelector('#room-name-input').value;
            window.location.pathname = '/chat/' + roomName + '/';
        };
    </script>
</body>
</html>





from django.shortcuts import render
def index(request):
    return render(request, 'index.html', {})





from django.urls import re_path
from . import views
urlpatterns = [
    re_path(r'^$', views.index, name='index'),
]





from django.contrib import admin
from django.urls import path, include
urlpatterns = [
    path('admin/', admin.site.urls),
    path('chat/', include(('apps.chat.urls', 'apps.chat'), namespace='chat')),# 实时聊天模块
]





# djangoweb/routing.py
from channels.auth import AuthMiddlewareStack
from channels.routing import ProtocolTypeRouter, URLRouter
import apps.chat.routing

application = ProtocolTypeRouter({
    # (http->django views is added by default)
})





INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'apps.mail',		# 邮件验证模块
    'apps.log',		# 日志配置模块
    'apps.chat',		# 实时聊天模块
    'channels',
]
# 注意替换自己项目的名称
WSGI_APPLICATION = 'djangoweb.wsgi.application'





<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8"/>
    <title>Chat Room</title>
</head>
<body>
    <textarea id="chat-log" cols="100" rows="20"></textarea><br/>
    <input id="chat-message-input" type="text" size="100"/><br/>
    <input id="chat-message-submit" type="button" value="Send"/>
</body>
<script>
    var roomName = {{ room_name_json }};

    var chatSocket = new WebSocket(
        'ws://' + window.location.host +
        '/ws/chat/' + roomName + '/');

    chatSocket.onmessage = function(e) {
        var data = JSON.parse(e.data);
        var message = data['message'];
        document.querySelector('#chat-log').value += (message + '\n');
    };

    chatSocket.onclose = function(e) {
        console.error('Chat socket closed unexpectedly');
    };

    document.querySelector('#chat-message-input').focus();
    document.querySelector('#chat-message-input').onkeyup = function(e) {
        if (e.keyCode === 13) {  // enter, return
            document.querySelector('#chat-message-submit').click();
        }
    };

    document.querySelector('#chat-message-submit').onclick = function(e) {
        var messageInputDom = document.querySelector('#chat-message-input');
        var message = messageInputDom.value;
        chatSocket.send(JSON.stringify({
            'message': message
        }));

        messageInputDom.value = '';
    };
</script>
</html>





from django.shortcuts import render
# mark_safe标记后django将不再对该函数的内容进行转义
from django.utils.safestring import mark_safe
import json
def index(request):
    return render(request, 'index.html', {})
def room(request, room_name):
    return render(request, 'room.html', {
        'room_name_json': mark_safe(json.dumps(room_name))
    })





from django.urls import re_path
from . import views
urlpatterns = [
    re_path(r'^$', views.index, name='index'),
    re_path(r'^(?P<room_name>[^/]+)/$', views.room, name='room'),
]





# chat/consumers.py
from channels.generic.websocket import AsyncWebsocketConsumer
import json

class ChatConsumer(AsyncWebsocketConsumer):
    def connect(self):
        self.accept()

    def disconnect(self, close_code):
        Pass

    def receive(self, text_data):
        text_data_json = json.loads(text_data)
        message = text_data_json['message']
        # 发送信息到WebSocket
        await self.send(text_data=json.dumps({
            'message': message
        }))





# chat/routing.py
from django.urls import re_path
from . import consumers
websocket_urlpatterns = [
    re_path(r'^ws/chat/(?P<room_name>[^/]+)/$', consumers.ChatConsumer),
]





# djangoweb/routing.py
from channels.auth import AuthMiddlewareStack
from channels.routing import ProtocolTypeRouter, URLRouter
import apps.chat.routing

application = ProtocolTypeRouter({
    # (http->django views is added by default)
    'websocket': AuthMiddlewareStack(
        URLRouter(
            apps.chat.routing.websocket_urlpatterns
        )
    ),
})





# djangoweb/settings.py
ASGI_APPLICATION = 'djangoweb.routing.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}





# chat/consumers.py

from channels.generic.websocket import WebsocketConsumer
from asgiref.sync import async_to_sync
import json

class ChatConsumer(AsyncWebsocketConsumer):
    def connect(self):
        # 'room_name'从URL路由中获取参数chat/routing.py ，打开与消费者的WebSocket连接
        # 每个使用者都有一个范围，其中包含有关其连接的信息
        # 特别是包括URL路由中的任何位置或关键字参数以及当前经过身份验证的用户
        self.room_name = self.scope['url_route']['kwargs']['room_name']
        # 直接从用户指定的房间名称构造Channels组名称，不进行任何引用或转义
        # 组名只能包含字母，数字，连字符和句号
        # 因此，如果输入具有其他字符的房间名称将失败
        self.room_group_name = 'chat_%s' % self.room_name

        # 进入房间
        async_to_sync (self.channel_layer.group_add）(
            self.room_group_name,
            self.channel_name
        )
        # 接受WebSocket连接
        # 如果不在connect()方法中调用accept()，则拒绝并关闭连接
        # 如果您选择接受连接，建议将accept()作为connect()中的最后一个操作调用
        self.accept()

    def disconnect(self, close_code):
        # 离开房间
          async_to_sync (self.channel_layer.group_discard)(
            self.room_group_name,
            self.channel_name
        )

    # 从WebSocket接收信息
    def receive(self, text_data):
        text_data_json = json.loads(text_data)
        message = text_data_json['message']

         # 发送信息到房间
          async_to_sync (self.channel_layer.group_send)(
            self.room_group_name,
            {
                'type': 'chat_message',
                'message': message
            }
        )

    # 从房间接收信息
    def chat_message(self, event):
        message = event['message']

        # 发送信息到WebSocket
        self.send(text_data=json.dumps({
            'message': message
        }))





# chat/consumers.py
from channels.generic.websocket import AsyncWebsocketConsumer
import json

class ChatConsumer(AsyncWebsocketConsumer):

    async def connect(self):
        # 'room_name'从URL路由中获取参数chat/routing.py ，打开与消费者的WebSocket连接
        # 每个使用者都有一个范围，其中包含有关其连接的信息
        # 特别是包括URL路由中的任何位置或关键字参数以及当前经过身份验证的用户
        self.room_name = self.scope['url_route']['kwargs']['room_name']
        # 直接从用户指定的房间名称构造Channels组名称，不进行任何引用或转义
        # 组名只能包含字母，数字，连字符和句点
        # 因此，如果输入具有其他字符的房间名称上失败
        self.room_group_name = 'chat_%s' % self.room_name

        # 进入房间
        await self.channel_layer.group_add(
            self.room_group_name,
            self.channel_name
        )
        # 接受WebSocket连接
        # 如果不在connect()方法中调用accept()，则拒绝并关闭连接。
        # 如果您选择接受连接，建议将accept()作为connect()中的最后一个操作调用。
        await self.accept()

    async def disconnect(self, close_code):
        # 离开房间
        await self.channel_layer.group_discard(
            self.room_group_name,
            self.channel_name
        )
    # 从WebSocket接收信息
    async def receive(self, text_data):
        text_data_json = json.loads(text_data)
        message = text_data_json['message']
        # 发送信息到房间
        await self.channel_layer.group_send(
            self.room_group_name,
            {
                'type': 'chat_message',
                'message': message
            }
        )
    # 从房间接收信息
    async def chat_message(self, event):
        message = event['message']

        # 发送信息到WebSocket
        await self.send(text_data=json.dumps({
            'message': message
        }))