Django WEB框架核心思想：

从数据库里取出数据
把数据内容写到模板里面，然后渲染到网页上

install  django-bootstrap4,

右击计算机---属性---高级系统设置---高级--环境变量

选择系统变量，找到path变量，把python的安装目录放进去

如：C:\Python27\;C:\Python27\Scripts;

D:\Python\Scripts----Django-admin命令就在这个目录下

进入到C盘任意目录，如果能运行django-admin startproject beijing 就表示环境变量没问题

不过建议以后运行Django命令还是进入到相应的工程目录下面

python3 manage.py runserver---start django 后端
python3 manage.py startapp mblog -----创建应用
view.py里面定义函数来修改html，函数返回render()来修改html
在view.py里面就是获取数据库的数据，形成字典形式，然后通过render（）函数修改html模板

models.py用来和数据库交互，定义了数据库的表的字段(如果是用的MySQL，需要提前建立一个数据库，sqlite3不需要)，表的名字都是自动定义

url.py设置url信息，即路由信息,和view.py里面的函数相关联起来

setting.py设置一些固定参数，例如模板路径，数据库，app名字
static目录下面放js文件，css脚本，然后在setting.py里面设置好路径

js脚本是浏览器调用的，也就是加载后才渲染页面
===============注意一下顺序
创建完新的应用后，再修改models.py，然后再修改admin.py,再修改setting.py(MySQL要实际创建一个数据库)，再迁移同步数据库
pycharm直接安装django-bootstrap4,然后在setting.py里面加入这个应用

python manage.py makemigrations 和 python manage.py migrate  (再查看数据库，已经生成新的表)

# 学习链接：Python高级编程技巧
https://www.cnblogs.com/valorchang/p/11434615.html

# https://www.cnblogs.com/wcwnina/p/8627189.html    Django Admin后台管理用户密码修改
----------
方法一
在Terminal中执行：python manage.py changepassword your_name（其中“your_name”为你要修改密码的用户名），根据提示内容修改即可。

方法二
进入shell环境，执行：

from django.contrib.auth.models import User
u = User.objects.get(username='your_name')
u.set_password('new_password')
u.save()
------------

# 如果用的sqlite3数据库，在pycharm上默认不需要任何设置，只有查看里面数据的时候才需要下载driver，参考截图
# 在学习Django架站第四章，在使用源代码的时候提示没有admin用户
# 自己创建一个admin用户即可,在pycharm的terminal窗口：密码是test123456
D:\xiaozhan_git\study_20190608\DjangoCodes - Python新手学Django架站的16堂课 第2版\ch04\mynewsite>python3 manage.py createsuperuser
Username (leave blank to use 'administrator'): admin
Email address: lxz_20081025@163.com
然后就能进入http://127.0.0.1:8000/admin/
然后在Products里面就能够自由增加数据，同时也会自动增加到sqlite3数据库，在pycharm里面同步查看数据
===================== models.ForeignKey 的个人理解,后续慢慢深入理解
foreignkey是一种关联字段，将两张表进行关联的方式

class Lesson(models.Model): # Lesson这张表要用到表Course里面的内容，关联如下
    course = models.ForeignKey(Course, verbose_name='课程', on_delete=models.CASCADE)

class Video(models.Model):  # 在这张表里要用到表Lesson的内容，所以下面进行关联,规则:设置变量为小写的表名,第一个参数为表名
    lesson = models.ForeignKey(Lesson, verbose_name='章节', on_delete=models.CASCADE)

==============================================================
python3 -m pip install --upgrade pip
家里电脑由于是Django2.2版本，所以需要修改数据库里面的配置，
========AttributeError: 'str' object has no attribute 'decode'
D:\Python\lib\site-packages\django\db\backends\mysql\operations.py
query = query.encode(errors='replace')

解决方法：把decode改为encode即可
===========================================================

说明：在线教育平台：三

如果是get请求，直接返回注册页面给用户
如果是post请求，先生成一个表单实例，并获取用户提交的所有信息（request.POST）
is_valid()方法，验证用户的提交信息是不是合法
如果合法，获取用户提交的email和password
实例化一个user_profile对象，把用户添加到数据库
默认添加的用户是激活状态（is_active=1表示True），在这里我们修改默认的状态（改为is_active = False），只有用户去邮箱激活之后才改为True
对密码加密，然后保存，发送邮箱，username是用户注册的邮箱，‘register’表明是注册
注册成功跳转到登录界面
保持原来的代码，逐步调试执行---人家原来的框架应该没问题
另外一个gitbub，也是关于这个在线教育平台的：https://github.com/xyliurui/OnlineLearningPlatform
https://blog.starmeow.cn/   ---网站页面很漂亮
https://www.cnblogs.com/itman123/p/11573284.html
============================================================================
debug
Unknown column 'course_course.is_banner' in 'field list' ----提示数据库里面没有这条记录，根源是修改了models.py，但是没有
操作python3 manage.py makemigrations, python3 manage.py migrate
debug
{% load staticfiles %}    这个在Django2.2系列可以使用，但是Django3.0已经不可以，只能用 {% load static %}
debug,关于url的一些变化，
1.x里面的写法是
url(r’^page=(\d+)&key=(\w+)$’, views.detail, name=”detail”),
现在的写法    ?P<page>这个表示起了一个别名,也可以不写
re_path('page=(?P<page>\d+)&key=(?P<key>\w+)', views.detail, name="detail"),
debug
一 超链接目标地址
href后面是目标地址
template中可以用"{% url 'app_name:url_name' param %}"
其中app_name和url_name都是在url中配置，实战如下：
二 url函数的名称参数，已经被替代为path函数

根urls下，写在include()的第二个参数位置，namespace = 'blog'

应用下则写在url()的第三个参数位置，name='article'

取决于是否使用了include引用另一个url配置文件
http://127.0.0.1:8000/users/info/   这是我打开网页进入到个人中心的url
在 base.html里面需要这样设置：href="{% url 'users:user_info' %}"
在users这个app的urls.py里面设置如下：
path("info/", UserinfoView.as_view(), name='user_info'),  # 在html模板里面的名字体现为user_info
然后在UserinfoView这个类实现里面 return render(request, 'usercenter-info.html')
在usercenter-info.html里面：<li><a href="{% url 'users:user_info' %}">个人中心</a>></li>
============================================================================
HttpResponseRedirect, redirect和reverse
https://www.jianshu.com/p/3d99ddd5148f
===================================================
user_info_form = UserInfoForm(request.POST, instance=request.user)
TypeError: __init__() got an unexpected keyword argument 'instance'
debug 采用下面的继承就可以,而不是forms.Form
class UserInfoForm(forms.ModelForm):
======================================================
Django配置404、500页面，与配置后的 static 处理
https://blog.csdn.net/geek_xiong/article/details/90349476
在views.py中添加404、500的处理函数
handler404 = 'index.views.page_not_found'
handler500 = 'index.views.page_error'
# 书写格式 handler404 名字不可以改。值的格式：app名称.views.函数名
# 或直接 handler404 = page_not_found  这里没有引号（前提， import 导入 page_not_found
========================================================
register,updatepwd 在公司网络调试不通，邮箱发不出去，提示socket1051 error
在家里可以调试成功
======================================
Ajax代码说明：org-list.html

第一行表示：其它代码执行完再执行
给“立即咨询”按钮绑定click事件，点击后执行function()函数里面的代码
cache:false   这个参数默认True，表示缓存，这里改为false，表示不用缓存
type：post    以post方式发送数据
url：把请求发送到哪个url
data:发送到服务器的数据
async:ture   表示异步发送
success:请求成功时执行的回调函数，data是服务器返回过来的数据
因为后台返回的数据是{"status’:"success"}或者{"status’:"fail"},这里做个判断
如果是“success”，则把提交表单里面的数据清空，如果是“fail”，显示错误信息
=======================================================================
https://github.com/twz915/DjangoUeditor3/
将包解压放到项目目录文件夹下。
python3 setup.py install

3.找到配置文件settings.py，在INSTALL_APPS里面增加DjangoUeditor（注册DjangoUeditor）
===================================
http://127.0.0.1:8000/org/home/1/
=========================================================================
django根据外键反向取数据库值:
比如class course  包含外键course-org，目前已经取得course-org的值，如何通过course-org取出course的值呢？
all_course = course_org.course_set().all()
course_org有一个方法course_set方法，其实就是把course  model的名称变成小写，然后后缀加上set，这样就可以反向获取course的数据库值
=====================================================================================================================
可以在pycharm里面直接更新数据库内容，参考我的截图
================================================================================================================
1、在course的model中定义一个统计章节数的函数：

def get_zj_nums(self):
    #获取课程章节数
    return self.lesson_set.all().count()

lesson的model含有一个course的外键，所以可以通过外键反向取lesson的值

2、在html页面可以通过后台返回的course调用这个方法来显示该课程在的章节数
<li><span class="pram word3">章&nbsp;节&nbsp;数：</span><span>{{ course.get_zj_nums }}</span></li>
=====================================================================
通过类的对象的方式操作，例子如下，一定要有save操作，
user = UserProfile.objects.get(email=email)
                user.is_active = True
                user.save()
https://www.cnblogs.com/yuanchenqi/articles/6083427.html   ---关于Django web的介绍，老男孩
==================================================
如果想打印数据库内容，可以在views.py里面增加调试打印，在html页面会显示出来，也可以选择终端显示
===========================================
ORM 一对多：     在多的表里面定义外键
class Course包含如下外键：
teacher = models.ForeignKey(Teacher,verbose_name='讲师',null=True,blank=True,on_delete=models.CASCADE)
course_org = models.ForeignKey(CourseOrg, on_delete=models.CASCADE, verbose_name="所属机构", null=True, blank=True)
表明一个teacher可以对应多门课程，
一个CourseOrg可以对应多门课程
在Course这个表里面查看，会自动增加两个字段:teacher_id,course_org_id
注意: Teacher和CourseOrg分别对应着两张表
如果实例化一个Course对象a,则a.teacher和a.course_org分别对应着Teacher表和CourseOrg表的实例化对象，
即关联到了另外两个表。
也可以继续调用关联表的内容，例如a.teacher.age, a.course_org.city
=============================================================================
https://www.cnblogs.com/regit/p/9531131.html
<a href="{% url 'org:org_home' course_org.id %}">   line81
==========================================
FBV（function base views） 就是在视图里使用函数处理请求
CBV（class base views） 就是在视图里使用类处理请求
=================================================================
出现403错误，应该添加{% csrf_token %}


