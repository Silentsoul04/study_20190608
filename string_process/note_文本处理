# https://www.cnblogs.com/twelvezuo/p/11727634.html   字符串内置函数
# https://www.jb51.net/article/147378.htm
# 换行符的英文单词：newline character, line break,
# 加号的英文单词： plus sign, plus symbol,addition operator
# 减号的英文单词： minus sign, subtraction sign
# 星号的英文单词： star, asterisk
# 双引号的单词： double quotes
# 问号的单词： question mark
# 感叹号的单词: exclamation mark/symbol
# 大于号，小于号： greater-than sign, less-than sign
# 等于号：  equal sign
# 逗号： comma 
# 分号：semicolon   冒号：colon
# 正则表达式学习网站 https://regexr.com/
# . 能匹配除了换行符意外的任意字符
# \w 匹配字母，数字和下划线
# \W 匹配非字母，非数字和非下划线，例如一些特殊字符:#$@%^&*()<>?":}{~[];'
# \s 匹配空格，tab键，即空白字符
# \S 匹配非空格，非tab键
# {m,n}表示匹配前面的字符m到n次
# \w{4} 匹配四个一组的字符，即四个字符一组作为匹配对象，贪婪匹配
## 例如用 \w{4}匹配 RegExr was created   结果是RegE crea
# * 表示匹配前一个字符0次或者无限次
# ？表示匹配前一个字符0次或者1次
## 例如 (wel)?com 能匹配 welcome com
##  (wel){2}com 可以匹配 welwelcom
# + 表示匹配前一个字符1次或者无限次
# *,+都是贪婪匹配
# \w+? 就变成了非贪婪匹配
# 正则表达式的预搜索,练习下面的例子：
正则表达式：(?<=src=\").*?(?=\")      \"表示转义，即双引号"

其中(?<=)为反向预搜索，表示要匹配的字符串前面必须是scr="

(?=)为正向预搜索，表示要匹配的字符串后面必须是"

.*?表示要匹配的部分

比如：

正式表达式：(?<=src=\").*?(?=\") 

待匹配的文本：<img src="/UploadFiles/image/20140304/20140304094318_2971.png" alt="" />

那么执行这个正则表达式后，就可以提取出 /UploadFiles/image/20140304/20140304094318_2971.png
# 匹配一个IP地址
## ((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?) 
## 2[0-4]\d 匹配200到249，25[0-5] 匹配250到255，[01]?\d\d? 匹配000到099

# \d{5}-\d{4}|\d{5}  这个表达式用于匹配美国的邮政编码
